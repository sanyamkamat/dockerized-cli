// Code generated by MockGen. DO NOT EDIT.
// Source: src/operations/dispatcher.go

// Package mock_operations is a generated GoMock package.
package mock_operations

import (
	operations "benzaita/dockerized/operations"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDispatcher is a mock of Dispatcher interface
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// Dispatch mocks base method
func (m *MockDispatcher) Dispatch(op operations.Operation) (error, interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", op)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(interface{})
	return ret0, ret1
}

// Dispatch indicates an expected call of Dispatch
func (mr *MockDispatcherMockRecorder) Dispatch(op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockDispatcher)(nil).Dispatch), op)
}
